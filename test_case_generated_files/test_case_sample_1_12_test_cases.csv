target_table,target_column,target_datatype,source_table,source_column,transformation_logic,test_case_name,test_case_description,test_case_query
SILVER.TDS_ICTF.ADJUSTMENTS,meta_ingest_datetime,timestamp,BRONZE.TDS_ICTF,meta_ingest_datetime,1:1,Test_Case_1_Meta_Ingest_Datetime_Transformation,Verify that the meta_ingest_datetime column in SILVER.TDS_ICTF.ADJUSTMENTS is a direct 1:1 copy of the meta_ingest_datetime column in BRONZE.TDS_ICTF with a timestamp data type,SELECT * FROM SILVER.TDS_ICTF.ADJUSTMENTS tgt LEFT JOIN BRONZE.TDS_ICTF src ON tgt.meta_ingest_datetime = src.meta_ingest_datetime WHERE tgt.meta_ingest_datetime IS NULL OR src.meta_ingest_datetime IS NULL;
SILVER.TDS_ICTF.ADJUSTMENTS,contract_id,string,BRONZE.TDS_ICTF,way4_contract_id,Right trim spaces; IF LENGTH of way4_contract_id is zero THEN NULL ELSE way4_contract_id,tc_1_contract_id_validation,Validate that transformation logic on way4_contract_id is applied correctly to result contract_id,SELECT * FROM SILVER.TDS_ICTF.ADJUSTMENTS tgt WHERE tgt.contract_id != (CASE WHEN LENGTH(RTRIM(src.way4_contract_id)) = 0 THEN NULL ELSE RTRIM(src.way4_contract_id) END) AND EXISTS (SELECT 1 FROM BRONZE.TDS_ICTF src WHERE src.way4_contract_id = tgt.contract_id);
SILVER.TDS_ICTF.ADJUSTMENTS,card_acceptor_id,string,BRONZE.TDS_ICTF,way4_contract_id,Right trim spaces; IF length of way4_contract_id is 0 THEN assign 'NA' ELSE use the value as is.,Test_Case_001,Verify if transformation logic for 'card_acceptor_id' is applied correctly by checking no discrepancies.,"SELECT * FROM SILVER.TDS_ICTF.ADJUSTMENTS tgt LEFT JOIN (SELECT RTRIM(way4_contract_id) AS transformed_value, CASE WHEN LENGTH(RTRIM(way4_contract_id)) = 0 THEN 'NA' ELSE RTRIM(way4_contract_id) END AS expected_value FROM BRONZE.TDS_ICTF) src ON tgt.card_acceptor_id = src.expected_value WHERE tgt.card_acceptor_id <> src.expected_value OR (tgt.card_acceptor_id IS NULL AND src.expected_value IS NOT NULL) OR (tgt.card_acceptor_id IS NOT NULL AND src.expected_value IS NULL);"
SILVER.TDS_ICTF.ADJUSTMENTS,site_id,string,BRONZE.TDS_ICTF,"way4_contract_id, contract_level","Right trim spaces; IF contract_level = L AND length of way4_contract_id > 4, then take last 4 characters of way4_contract_id",TC_001_SILVER_TDS_ICTF_ADJUSTMENTS_SITE_ID,Verify that site_id in SILVER.TDS_ICTF.ADJUSTMENTS is derived from right-trimmed and evaluated BRONZE.TDS_ICTF.way4_contract_id based on BRONZE.TDS_ICTF.contract_level,"SELECT * FROM (SELECT TRIM(BOTH FROM RIGHT(way4_contract_id, 4)) AS transformed_site_id, CASE WHEN contract_level = 'L' THEN RIGHT(TRIM(BOTH FROM way4_contract_id), 4) ELSE NULL END AS expected_site_id FROM BRONZE.TDS_ICTF) AS transformed WHERE transformed.transformed_site_id <> transformed.expected_site_id;"
SILVER.TDS_ICTF.ADJUSTMENTS,terminal_id,string,BRONZE.TDS_ICTF,way4_contract_id,Right trim spaces; IF length of way4_contract_id >= 6 THEN SUBSTR => RIGHT; ELSE '000' + RIGHT,TC001_TransformationLogicApplication,Verify transformation of 'way4_contract_id' to 'terminal_id' with right trim and zero-padding logic,"SELECT * FROM SILVER.TDS_ICTF.ADJUSTMENTS WHERE terminal_id != CASE WHEN LENGTH(RTRIM(way4_contract_id)) >= 6 THEN RIGHT(RTRIM(way4_contract_id), 5) ELSE RIGHT(CONCAT('000', RTRIM(way4_contract_id)), 5) END;"
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_id,string,BRONZE.TDS_ICTF,payment_reference,1:1,TC_001_1To1_Transformation,Verify 1:1 Transformation by checking that adjustment_id matches payment_reference in type and value,SELECT * FROM SILVER.TDS_ICTF.ADJUSTMENTS TGT WHERE NOT EXISTS (SELECT 1 FROM BRONZE.TDS_ICTF SRC WHERE TGT.adjustment_id = SRC.payment_reference);
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_reference,string,BRONZE.TDS_ICTF,payment_id,1:1,TC001_AdjustmentReference_Transformation,Verify if the adjustment_reference column in the SILVER.TDS_ICTF.ADJUSTMENTS table has the exact same values as the payment_id column in the BRONZE.TDS_ICTF table as per 1:1 transformation logic. No records should be returned if transformation logic is correct.,SELECT * FROM SILVER.TDS_ICTF.ADJUSTMENTS TGT WHERE NOT EXISTS (SELECT 1 FROM BRONZE.TDS_ICTF SRC WHERE TGT.adjustment_reference = SRC.payment_id);
SILVER.TDS_ICTF.ADJUSTMENTS,message_code,string,BRONZE.TDS_ICTF,way4_message_code,1:1,TC_001_Transformation_Validation_Silver_Adjustments_Message_Code,Verify that the transformation logic 1:1 is correctly applied from BRONZE.TDS_ICTF.way4_message_code to SILVER.TDS_ICTF.ADJUSTMENTS.message_code,SELECT * FROM SILVER.TDS_ICTF.ADJUSTMENTS AS tgt LEFT JOIN BRONZE.TDS_ICTF AS src ON tgt.message_code = src.way4_message_code WHERE tgt.message_code != src.way4_message_code OR (tgt.message_code IS NULL AND src.way4_message_code IS NOT NULL) OR (tgt.message_code IS NOT NULL AND src.way4_message_code IS NULL);
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_datetime,datetime,BRONZE.TDS_ICTF,way4_creation_datetime,Convert to datetime,TC001_Check_Transformation_AdjustmentDatetime,Verify that the 'way4_creation_datetime' in 'BRONZE.TDS_ICTF' is transformed correctly to 'datetime' in 'SILVER.TDS_ICTF.ADJUSTMENTS'. Fetch records where the conversion logic is not applied correctly or results in null values in 'SILVER.TDS_ICTF.ADJUSTMENTS'.,SELECT b.way4_creation_datetime FROM BRONZE.TDS_ICTF b LEFT JOIN SILVER.TDS_ICTF.ADJUSTMENTS s ON CAST(b.way4_creation_datetime AS DATETIME) = s.adjustment_datetime WHERE s.adjustment_datetime IS NULL OR TRY_CAST(b.way4_creation_datetime AS DATETIME) IS NULL;
SILVER.TDS_ICTF.ADJUSTMENTS,posting_date,date,BRONZE.TDS_ICTF,way4_billing_date,Convert to date,test_case_001,Validate if the converted date in the source column matches the expected format of the target column,SELECT * FROM BRONZE.TDS_ICTF WHERE TRY_CAST(way4_billing_date AS DATE) IS NULL;
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_currency_alphanumeric,string,BRONZE.TDS_ICTF,net_amount_currency,Convert value from ISO 4217 numeric to ISO 4217 alphabetic code,TC_ISO4217_NUMERIC_TO_ALPHABETIC_CONVERSION,Verify adjustment_currency_alphanumeric is correctly converted from net_amount_currency using ISO 4217 numeric to alphabetic mapping,"SELECT net_amount_currency, adjustment_currency_alphanumeric FROM BRONZE.TDS_ICTF AS src LEFT JOIN SILVER.TDS_ICTF.ADJUSTMENTS AS tgt ON src.net_amount_currency = <logic_to_convert_numeric_to_alphabetic>(tgt.adjustment_currency_alphanumeric) WHERE src.net_amount_currency IS NOT NULL AND tgt.adjustment_currency_alphanumeric IS NOT NULL AND src.net_amount_currency != <logic_to_convert_alphabetic_to_numeric>(tgt.adjustment_currency_alphanumeric);"
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_amount,integer,BRONZE.TDS_ICTF,net_amount,1:1,validate_data_type_and_value,Test that the values in the target column have been copied correctly as integers from the source column using 1:1 mapping.,SELECT net_amount FROM BRONZE.TDS_ICTF WHERE NOT EXISTS (SELECT 1 FROM SILVER.TDS_ICTF.ADJUSTMENTS WHERE adjustment_amount = CAST(net_amount AS INTEGER));
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_description,string,BRONZE.TDS_ICTF,way4_description,1:1,TC_001_1to1_Transformation,Verify that adjustment_description in target matches way4_description from source.,SELECT * FROM SILVER.TDS_ICTF.ADJUSTMENTS tgt JOIN BRONZE.TDS_ICTF src ON tgt.adjustment_description != src.way4_description;
SILVER.TDS_ICTF.ADJUSTMENTS,brand_id,string,BRONZE.TDS_ICTF,brand_id,1:1,TC_001_Validate_Brand_ID_Transformation,Ensure that the brand_id column in SILVER.TDS_ICTF.ADJUSTMENTS is a direct one-to-one copy of the brand_id column in BRONZE.TDS_ICTF.,SELECT brand_id FROM SILVER.TDS_ICTF.ADJUSTMENTS EXCEPT SELECT CAST(brand_id AS STRING) FROM BRONZE.TDS_ICTF;
