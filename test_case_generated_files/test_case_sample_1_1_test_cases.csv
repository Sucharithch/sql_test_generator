target_table,target_column,target_datatype,source_table,source_column,transformation_logic,test_case_name,test_case_description,test_case_query
SILVER.TDS_ICTF.ADJUSTMENTS,meta_ingest_datetime,timestamp,BRONZE.TDS_ICTF,meta_ingest_datetime,1:1,TC1_MetaIngestDatetime_Validation,Verify that the 'meta_ingest_datetime' column in the 'SILVER.TDS_ICTF.ADJUSTMENTS' table matches the 'meta_ingest_datetime' column in the 'BRONZE.TDS_ICTF' table without any transformation.,SELECT CASE WHEN SILVER.meta_ingest_datetime = BRONZE.meta_ingest_datetime THEN 'Pass' ELSE 'Fail' END as test_result FROM SILVER.TDS_ICTF.ADJUSTMENTS SILVER JOIN BRONZE.TDS_ICTF BRONZE ON SILVER.meta_ingest_datetime = BRONZE.meta_ingest_datetime;
SILVER.TDS_ICTF.ADJUSTMENTS,contract_id,string,BRONZE.TDS_ICTF,way4_contract_id,"Right trim spaces; IF LENGTH of way4_contract_id > 10 THEN SUBSTRING(way4_contract_id, 1, 10)",TC001_ContractID_Transformation,Verify that the right trim transformation and length check/SUBSTRING are correctly applied for 'contract_id' from 'way4_contract_id',"SELECT CASE WHEN LENGTH(RTRIM(way4_contract_id)) > 10 THEN SUBSTRING(RTRIM(way4_contract_id), 1, 10) ELSE RTRIM(way4_contract_id) END AS transformed_value FROM BRONZE.TDS_ICTF LEFT JOIN SILVER.TDS_ICTF.ADJUSTMENTS ON RTRIM(way4_contract_id) = contract_id;"
SILVER.TDS_ICTF.ADJUSTMENTS,card_acceptor_id,string,BRONZE.TDS_ICTF,way4_contract_id,Right trim spaces; IF length of way4_contracto...,TC001_card_acceptor_id_transformation,"Verify that the card_acceptor_id in SILVER.TDS_ICTF.ADJUSTMENTS is correctly populated from BRONZE.TDS_ICTF.way4_contract_id by applying the transformation logic of trimming trailing spaces and setting to 'XXX_OVERRIDE' when length is 32 or more; otherwise, populate with the trimmed value.","SELECT card_acceptor_id, CASE WHEN LENGTH(RTRIM(way4_contract_id)) >= 32 THEN 'XXX_OVERRIDE' ELSE RTRIM(way4_contract_id) END AS expected_card_acceptor_id FROM BRONZE.TDS_ICTF source JOIN SILVER.TDS_ICTF.ADJUSTMENTS target ON source.way4_contract_id = target.card_acceptor_id;"
SILVER.TDS_ICTF.ADJUSTMENTS,site_id,string,BRONZE.TDS_ICTF,"way4_contract_id, contract_level","Right trim spaces; IF contract_level = L AND length(way4_contract_id) = 12, Then site_id = way4_contract_id ELSE NULL",TC_001_Check_Site_ID_Transformation,"Test that site_id in SILVER.TDS_ICTF.ADJUSTMENTS is correctly populated by right trimming spaces from way4_contract_id and applying the transformation logic: IF contract_level = 'L' AND length of way4_contract_id is 12, Insert way4_contract_id into site_id ELSE insert NULL","SELECT a.site_id, b.way4_contract_id, b.contract_level FROM SILVER.TDS_ICTF.ADJUSTMENTS a JOIN BRONZE.TDS_ICTF b ON TRIM(b.way4_contract_id) = a.site_id AND b.contract_level = 'L' AND LENGTH(b.way4_contract_id) = 12 WHERE a.site_id IS NOT NULL;"
SILVER.TDS_ICTF.ADJUSTMENTS,terminal_id,string,BRONZE.TDS_ICTF,way4_contract_id,"Right trim spaces; IF length of way4_contract_id after trim > 6, take substring(1, 6); ELSE use entire value;",TC_001_RightTrimAndSubstring,Verify that the 'terminal_id' in 'SILVER.TDS_ICTF.ADJUSTMENTS' is correctly populated by trimming spaces from 'way4_contract_id' in 'BRONZE.TDS_ICTF' and applying substring transformation if needed.,"SELECT terminal_id, LENGTH(terminal_id) AS terminal_length FROM SILVER.TDS_ICTF.ADJUSTMENTS; SELECT RTRIM(way4_contract_id) AS transformed_id, LENGTH(RTRIM(way4_contract_id)) AS transformed_length FROM BRONZE.TDS_ICTF WHERE CASE WHEN LENGTH(RTRIM(way4_contract_id)) > 6 THEN SUBSTRING(RTRIM(way4_contract_id), 1, 6) ELSE RTRIM(way4_contract_id) END = terminal_id;"
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_id,string,BRONZE.TDS_ICTF,payment_reference,1:1,TC_001_Validate_Adjustment_ID_Transformation,Verify that the 'adjustment_id' column in 'SILVER.TDS_ICTF.ADJUSTMENTS' table is correctly populated with 'payment_reference' from 'BRONZE.TDS_ICTF' with 1:1 transformation logic.,"SELECT s.adjustment_id, b.payment_reference FROM SILVER.TDS_ICTF.ADJUSTMENTS s JOIN BRONZE.TDS_ICTF b ON s.adjustment_id = b.payment_reference;"
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_reference,string,BRONZE.TDS_ICTF,payment_id,1:1,TC_001_Verify_Adjustment_Reference_Mapping,Verify that the 'adjustment_reference' column in SILVER.TDS_ICTF.ADJUSTMENTS is populated correctly by mapping it directly from the 'payment_id' column in BRONZE.TDS_ICTF table.,"SELECT a.adjustment_reference, b.payment_id FROM SILVER.TDS_ICTF.ADJUSTMENTS a JOIN BRONZE.TDS_ICTF b ON a.adjustment_reference = b.payment_id WHERE a.adjustment_reference IS NOT NULL;"
SILVER.TDS_ICTF.ADJUSTMENTS,message_code,string,BRONZE.TDS_ICTF,way4_message_code,1:1,TC_01_Verify_String_Transformation,Verify that 'message_code' in the target table is a string and is directly transformed from 'way4_message_code'.,SELECT message_code FROM SILVER.TDS_ICTF.ADJUSTMENTS WHERE NOT EXISTS (SELECT 1 FROM BRONZE.TDS_ICTF WHERE SILVER.TDS_ICTF.ADJUSTMENTS.message_code = BRONZE.TDS_ICTF.way4_message_code);
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_datetime,datetime,BRONZE.TDS_ICTF,way4_creation_datetime,Convert to datetime,TC_001_Validate_Conversion_To_Datetime,Verify that the 'way4_creation_datetime' column from 'BRONZE.TDS_ICTF' is correctly converted to a datetime format in the 'adjustment_datetime' column of 'SILVER.TDS_ICTF.ADJUSTMENTS'.,"SELECT adjustment_datetime, CAST(way4_creation_datetime AS DATETIME) AS expected_datetime FROM SILVER.TDS_ICTF.ADJUSTMENTS INNER JOIN BRONZE.TDS_ICTF ON SILVER.TDS_ICTF.ADJUSTMENTS.some_id_column = BRONZE.TDS_ICTF.some_id_column WHERE adjustment_datetime != CAST(way4_creation_datetime AS DATETIME);"
SILVER.TDS_ICTF.ADJUSTMENTS,posting_date,date,BRONZE.TDS_ICTF,way4_billing_date,Convert to date,TestCase_01_Validate_PostingDate_Conversion,Verify that the target column `posting_date` in `SILVER.TDS_ICTF.ADJUSTMENTS` is correctly transformed to the `date` datatype from the `way4_billing_date` in `BRONZE.TDS_ICTF`.,SELECT CAST(way4_billing_date AS DATE) AS transformed_date FROM BRONZE.TDS_ICTF WHERE CAST(way4_billing_date AS DATE) IS NOT NULL;
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_currency_alphanumeric,string,BRONZE.TDS_ICTF,net_amount_currency,Convert value from ISO 4217 numeric to ISO 4217 alphanumeric code,TC_Conversion_ISO4217_Numeric_To_Alpha,"Test if the conversion logic correctly converts ISO 4217 numeric currency codes to their corresponding alphanumeric representations and populates the 'adjustment_currency_alphanumeric' column in the target table, ensuring the datatype is string and handling all valid ISO 4217 numeric values.","SELECT CASE WHEN target.adjustment_currency_alphanumeric IS NOT NULL THEN 'PASS' ELSE 'FAIL' END AS test_result FROM (SELECT target.adjustment_currency_alphanumeric, (SELECT ISO4217_alpha FROM ISO4217_conversion_table WHERE ISO4217_numeric = source.net_amount_currency) AS expected_value FROM SILVER.TDS_ICTF.ADJUSTMENTS target INNER JOIN BRONZE.TDS_ICTF source ON target.<primary_key> = source.<primary_key>) AS comparison WHERE target.adjustment_currency_alphanumeric = comparison.expected_value;"
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_amount,integer,BRONZE.TDS_ICTF,net_amount,1:1,TC_001_Verify_Adjustment_Amount_DataType,Verify that the data type of adjustment_amount in SILVER.TDS_ICTF.ADJUSTMENTS is integer and matches net_amount in BRONZE.TDS_ICTF after 1:1 transformation.,SELECT adjustment_amount FROM SILVER.TDS_ICTF.ADJUSTMENTS WHERE CAST(adjustment_amount AS INTEGER) != adjustment_amount;
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_amount,integer,BRONZE.TDS_ICTF,net_amount,1:1,TC_002_Compare_NetAmount_And_AdjustmentAmount,Compare values from net_amount in BRONZE.TDS_ICTF with adjustment_amount in SILVER.TDS_ICTF to ensure a 1:1 transform.,"SELECT s.adjustment_amount, b.net_amount FROM SILVER.TDS_ICTF.ADJUSTMENTS s JOIN BRONZE.TDS_ICTF b ON s.adjustment_amount = b.net_amount WHERE s.adjustment_amount IS NULL OR b.net_amount IS NULL;"
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_description,string,BRONZE.TDS_ICTF,way4_description,1:1,TC_001_Verify_Column_Adjustment_Description,Verify if the target column 'adjustment_description' in the 'SILVER.TDS_ICTF.ADJUSTMENTS' table is correctly populated with the values from 'way4_description' column of 'BRONZE.TDS_ICTF' without any transformation.,SELECT COUNT(*) FROM SILVER.TDS_ICTF.ADJUSTMENTS AS TGT LEFT JOIN BRONZE.TDS_ICTF AS SRC ON TGT.adjustment_description = SRC.way4_description WHERE SRC.way4_description IS NULL OR TGT.adjustment_description IS NULL;
SILVER.TDS_ICTF.ADJUSTMENTS,brand_id,string,BRONZE.TDS_ICTF,brand_id,1:1,TC01_Validate_BrandID_String,"Verify if the 'brand_id' column in the target table 'SILVER.TDS_ICTF.ADJUSTMENTS' contains all values from the 'brand_id' column in the source table 'BRONZE.TDS_ICTF', ensuring data type is string and transformation is 1:1.","SELECT CASE WHEN COUNT(*) = 0 THEN 'PASS' ELSE 'FAIL' END AS TestResult FROM (SELECT a.brand_id AS target_brand_id, b.brand_id AS source_brand_id FROM SILVER.TDS_ICTF.ADJUSTMENTS a LEFT JOIN BRONZE.TDS_ICTF b ON a.brand_id = CAST(b.brand_id AS STRING) WHERE a.brand_id IS NULL OR b.brand_id IS NULL) test;"
