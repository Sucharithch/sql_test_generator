target_table,target_column,target_datatype,source_table,source_column,transformation_logic,test_case_description,test_case_query
SILVER.TDS_ICTF.ADJUSTMENTS,meta_ingest_datetime,timestamp,BRONZE.TDS_ICTF,meta_ingest_datetime,1:1,Test Case: Verify that the 'meta_ingest_datetime' column in the target table 'SILVER.TDS_ICTF.ADJUSTMENTS' is correctly populated with 'meta_ingest_datetime' values from the source table 'BRONZE.TDS_ICTF' with the expected transformation logic.,SQL Query: SELECT COUNT(*) FROM SILVER.TDS_ICTF.ADJUSTMENTS TGT JOIN BRONZE.TDS_ICTF SRC ON TGT.meta_ingest_datetime = SRC.meta_ingest_datetime WHERE TGT.meta_ingest_datetime IS NOT NULL;
SILVER.TDS_ICTF.ADJUSTMENTS,contract_id,string,BRONZE.TDS_ICTF,way4_contract_id,Right trim spaces; IF LENGTH of way4_contract_id = 0 THEN contract_id = NULL ELSE contract_id = way4_contract_id,Test Case 1: Verify trimmed spaces and null check. Insert test data with leading/trailing spaces and empty values into BRONZE.TDS_ICTF and check SILVER.TDS_ICTF.ADJUSTMENTS contract_id for right trimming and null where appropriate.,SELECT CASE WHEN TRIM(TRAILING FROM way4_contract_id) = '' THEN NULL ELSE TRIM(TRAILING FROM way4_contract_id) END AS contract_id FROM BRONZE.TDS_ICTF
SILVER.TDS_ICTF.ADJUSTMENTS,site_id,string,BRONZE.TDS_ICTF,"way4_contract_id, contract_level",Right trim spaces; IF contract_level = L AND length of way4_contract_id > 3 THEN TAKE RIGHTMOST 3 characters of way4_contract_id ELSE assign NULL,"Verify that site_id in SILVER.TDS_ICTF.ADJUSTMENTS is the rightmost 3 characters of way4_contract_id from BRONZE.TDS_ICTF where contract_level is 'L' and the length of way4_contract_id is greater than 3, else NULL","SELECT CASE WHEN t.site_id = RIGHT(TRIM(b.way4_contract_id), 3) OR (b.contract_level = 'L' AND LENGTH(TRIM(b.way4_contract_id)) <= 3 AND t.site_id IS NULL) THEN 'PASS' ELSE 'FAIL' END AS test_result FROM SILVER.TDS_ICTF.ADJUSTMENTS t JOIN BRONZE.TDS_ICTF b ON t.site_id = (CASE WHEN b.contract_level = 'L' AND LENGTH(TRIM(b.way4_contract_id)) > 3 THEN RIGHT(TRIM(b.way4_contract_id), 3) ELSE NULL END);"
SILVER.TDS_ICTF.ADJUSTMENTS,terminal_id,string,BRONZE.TDS_ICTF,way4_contract_id,Right trim spaces; IF length of way4_contract_id < 8 THEN set terminal_id to '00000000' ELSE retain as is,1. Verify terminal_id is right trimmed of spaces and length of way4_contract_id < 8 converts to '00000000'.\n2. Check terminal_id retains way4_contract_id value if length is >= 8.\n3. Validate terminal_id data type as string.,SELECT CASE WHEN CHAR_LENGTH(RTRIM(way4_contract_id)) < 8 THEN '00000000' ELSE RTRIM(way4_contract_id) END AS terminal_id FROM BRONZE.TDS_ICTF;
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_reference,string,BRONZE.TDS_ICTF,payment_id,1:1,Verify that each record in the target column 'adjustment_reference' matches the corresponding record in the source column 'payment_id'.,"SELECT s.adjustment_reference, b.payment_id FROM SILVER.TDS_ICTF.ADJUSTMENTS s JOIN BRONZE.TDS_ICTF b ON s.adjustment_reference = b.payment_id WHERE s.adjustment_reference IS NOT NULL;"
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_reference,string,BRONZE.TDS_ICTF,payment_id,1:1,Check the data type of 'adjustment_reference' is string in the target table.,"SELECT column_name, data_type FROM information_schema.columns WHERE table_name='ADJUSTMENTS' AND column_name='adjustment_reference';"
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_reference,string,BRONZE.TDS_ICTF,payment_id,1:1,Ensure there are no null values in the 'adjustment_reference' column if it's not allowed in business logic.,SELECT COUNT(*) FROM SILVER.TDS_ICTF.ADJUSTMENTS WHERE adjustment_reference IS NULL;
SILVER.TDS_ICTF.ADJUSTMENTS,message_code,string,BRONZE.TDS_ICTF,way4_message_code,1:1,Test that the data type of SILVER.TDS_ICTF.ADJUSTMENTS.message_code is consistent with string and matches the values in BRONZE.TDS_ICTF.way4_message_code.,"SELECT CASE WHEN COUNT(*) = 0 THEN 'PASS' ELSE 'FAIL' END AS TestResult FROM (SELECT CAST(message_code AS VARCHAR) AS tgt_col, CAST(way4_message_code AS VARCHAR) AS src_col FROM SILVER.TDS_ICTF.ADJUSTMENTS tgt JOIN BRONZE.TDS_ICTF src ON tgt.message_code = src.way4_message_code WHERE tgt_col <> src_col OR tgt_col IS NULL OR src_col IS NULL) AS comparison;"
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_datetime,datetime,BRONZE.TDS_ICTF,way4_creation_datetime,Convert to datetime,Verify if adjustment_datetime is correctly transformed from way4_creation_datetime and ensure it is in datetime format,"SELECT adjustment_datetime, way4_creation_datetime FROM SILVER.TDS_ICTF.ADJUSTMENTS aj JOIN BRONZE.TDS_ICTF br ON aj.adjustment_datetime = CONVERT(DATETIME, br.way4_creation_datetime) WHERE aj.adjustment_datetime IS NOT NULL AND br.way4_creation_datetime IS NOT NULL;"
SILVER.TDS_ICTF.ADJUSTMENTS,posting_date,date,BRONZE.TDS_ICTF,way4_billing_date,Convert to date,Test Case 1: Verify if the 'posting_date' in SILVER.TDS_ICTF.ADJUSTMENTS is correctly transformed from 'way4_billing_date' of type string to date.,"SELECT way4_billing_date, CAST(way4_billing_date AS DATE) AS expected_posting_date FROM BRONZE.TDS_ICTF WHERE way4_billing_date IS NOT NULL;"
SILVER.TDS_ICTF.ADJUSTMENTS,posting_date,date,BRONZE.TDS_ICTF,way4_billing_date,Convert to date,Test Case 2: Validate that the data type of 'posting_date' in SILVER.TDS_ICTF.ADJUSTMENTS is 'date' after transformation.,SELECT DISTINCT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TD_ICTF.ADJUSTMENTS' AND COLUMN_NAME = 'posting_date';
SILVER.TDS_ICTF.ADJUSTMENTS,posting_date,date,BRONZE.TDS_ICTF,way4_billing_date,Convert to date,Test Case 3: Check that all non-null values in 'way4_billing_date' in BRONZE.TDS_ICTF are converted and loaded into 'posting_date' in SILVER.TDS_ICTF.ADJUSTMENTS.,SELECT COUNT(*) FROM BRONZE.TDS_ICTF WHERE way4_billing_date IS NOT NULL;
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_currency_alphanumeric,string,BRONZE.TDS_ICTF,net_amount_currency,Convert value from ISO 4217 numeric to ISO 4217 alpha-3 currency code,Test Case 1: Verify that all values in adjustment_currency_alphanumeric column are valid ISO 4217 alpha-3 codes. Expected Result: Each value should be a valid three-letter currency code.,"SELECT a.adjustment_currency_alphanumeric, b.net_amount_currency FROM SILVER.TDS_ICTF.ADJUSTMENTS a LEFT JOIN BRONZE.TDS_ICTF b ON a.adjustment_currency_alphanumeric = (CONVERT_LOGIC_HERE)"
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_currency_alphanumeric,string,BRONZE.TDS_ICTF,net_amount_currency,Convert value from ISO 4217 numeric to ISO 4217 alpha-3 currency code,Test Case 2: Verify that the transformation logic correctly converts ISO 4217 numeric codes to alpha-3 codes. Expected Result: The transformation logic should match a predefined mapping table of numeric to alpha-3 codes.,"SELECT b.net_amount_currency, PREDEFINED_MAPPING_TABLE.alpha_3_currency_code FROM BRONZE.TDS_ICTF b INNER JOIN PREDEFINED_MAPPING_TABLE ON b.net_amount_currency = PREDEFINED_MAPPING_TABLE.numeric_currency_code WHERE NOT EXISTS (SELECT 1 FROM SILVER.TDS_ICTF.ADJUSTMENTS a WHERE a.adjustment_currency_alphanumeric = PREDEFINED_MAPPING_TABLE.alpha_3_currency_code)"
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_currency_alphanumeric,string,BRONZE.TDS_ICTF,net_amount_currency,Convert value from ISO 4217 numeric to ISO 4217 alpha-3 currency code,Test Case 3: Ensure non-nullability constraint is maintained where applicable. Expected Result: The column adjustment_currency_alphanumeric should not have null values if required by the data model.,SELECT COUNT(*) FROM SILVER.TDS_ICTF.ADJUSTMENTS WHERE adjustment_currency_alphanumeric IS NULL;
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_amount,integer,BRONZE.TDS_ICTF,net_amount,1:1,Verify that the data type of the adjustment_amount column in SILVER.TDS_ICTF.ADJUSTMENTS is integer,SELECT COUNT(*) FROM SILVER.TDS_ICTF.ADJUSTMENTS WHERE typeof(adjustment_amount) != 'integer';
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_amount,integer,BRONZE.TDS_ICTF,net_amount,1:1,Verify that each value in adjustment_amount in SILVER.TDS_ICTF.ADJUSTMENTS matches the corresponding value in net_amount from BRONZE.TDS_ICTF,SELECT COUNT(*) FROM SILVER.TDS_ICTF.ADJUSTMENTS s LEFT JOIN BRONZE.TDS_ICTF b ON s.adjustment_amount = b.net_amount WHERE b.net_amount IS NULL OR s.adjustment_amount IS NULL;
SILVER.TDS_ICTF.ADJUSTMENTS,adjustment_description,string,BRONZE.TDS_ICTF,way4_description,1:1,Verify that the target column 'adjustment_description' in the table SILVER.TDS_ICTF.ADJUSTMENTS contains the same string values as the source column 'way4_description' in the table BRONZE.TDS_ICTF for all corresponding records.,SELECT COUNT(*) FROM SILVER.TDS_ICTF.ADJUSTMENTS tgt LEFT JOIN BRONZE.TDS_ICTF src ON tgt.adjustment_description = src.way4_description WHERE tgt.adjustment_description != src.way4_description OR tgt.adjustment_description IS NULL OR src.way4_description IS NULL;
SILVER.TDS_ICTF.ADJUSTMENTS,brand_id,string,BRONZE.TDS_ICTF,brand_id,1:1,Verify that the data in the 'brand_id' column of the 'SILVER.TDS_ICTF.ADJUSTMENTS' table is a direct 1:1 mapping from the 'brand_id' column in the 'BRONZE.TDS_ICTF' table.,SELECT COUNT(*) FROM SILVER.TDS_ICTF.ADJUSTMENTS AS tgt LEFT JOIN BRONZE.TDS_ICTF AS src ON tgt.brand_id = src.brand_id WHERE tgt.brand_id IS NULL OR src.brand_id IS NULL;
